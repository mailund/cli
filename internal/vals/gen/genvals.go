package main

import (
	"fmt"
	"os"
	"strings"
	"text/template"
)

var valsTemplate = `
type {{TypeName .TypeName}} {{.TypeName}}

func (val *{{TypeName .TypeName}}) Set(x string) error {
	v, err := {{.Parse}}
	if err != nil {
		err = inter.ParseErrorf("argument \"%s\" cannot be parsed as {{.TypeName}}", x)
	} else {
		*val = {{TypeName .TypeName}}(v)
	}

	return err
}

func (val *{{TypeName .TypeName}}) String() string {
	return {{.Format}}
}

func {{TypeName .TypeName}}Constructor(val reflect.Value) inter.FlagValue {
	return (*{{TypeName .TypeName}})(val.Interface().(*{{.TypeName}}))
}

type {{VariadicTypeName .TypeName}} []{{.TypeName}}

func (vals *{{VariadicTypeName .TypeName}}) Set(xs []string) error {
	*vals = make([]{{.TypeName}}, len(xs))

	for i, x := range xs {
		val, err := {{.Parse}}
		if err != nil {
			return inter.ParseErrorf("cannot parse '%s' as {{.TypeName}}", x)
		}

		(*vals)[i] = {{.TypeName}}(val)
	}

	return nil
}

func {{VariadicTypeName .TypeName}}Constructor(val reflect.Value) inter.VariadicValue {
	return (*{{VariadicTypeName .TypeName}})(val.Interface().(*[]{{.TypeName}}))
}
`

var tableTemplate = "\tValsConstructors[reflect.TypeOf((*{{.TypeName}})(nil))] = {{TypeName .TypeName}}Constructor\n" +
	"\tVarValsConstructors[reflect.TypeOf((*[]{{.TypeName}})(nil))] = {{VariadicTypeName .TypeName}}Constructor\n"

type typeSpec struct {
	TypeName string
	Parse    string
	Format   string
}

var valTypes = []typeSpec{
	{TypeName: "string",
		Parse:  "x, (error)(nil)",
		Format: "string(*val)"},
	{TypeName: "bool",
		Parse:  "strconv.ParseBool(x)",
		Format: "strconv.FormatBool(bool(*val))"},
	{TypeName: "int",
		Parse:  "strconv.ParseInt(x, 0, strconv.IntSize)",
		Format: "strconv.Itoa(int(*val))"},
	{TypeName: "float64",
		Parse:  "strconv.ParseFloat(x, 64)",
		Format: "strconv.FormatFloat(float64(*val), 'g', -1, 64)"},
}

// I would love to pipe the result through gofmt and goimports,
// but fucking go won't let me install goimports. Stupid stupid stupid go.
func main() {
	valsFuncs := template.Must(template.New("val").Funcs(template.FuncMap{
		"TypeName":         func(name string) string { return strings.Title(name) + "Value" },
		"VariadicTypeName": func(name string) string { return "Variadic" + strings.Title(name) + "Value" },
	}).Parse(valsTemplate))
	tableInit := template.Must(template.New("val").Funcs(template.FuncMap{
		"TypeName":         func(name string) string { return strings.Title(name) + "Value" },
		"VariadicTypeName": func(name string) string { return "Variadic" + strings.Title(name) + "Value" },
	}).Parse(tableTemplate))

	fmt.Println(`// Code generated by genvals.go DO NOT EDIT.
package vals

import (
	"reflect"
	"strconv"

	"github.com/mailund/cli/inter"
)`)

	for _, tspec := range valTypes {
		_ = valsFuncs.Execute(os.Stdout, tspec)
	}

	fmt.Println("\nfunc init() {")

	for _, tspec := range valTypes {
		_ = tableInit.Execute(os.Stdout, tspec)
	}

	fmt.Println("}")
}
